네, 요청하신 아주 단순한 클리커 게임 "포인트 생성기"의 기획서 초안을 Markdown 형식으로 작성해 드립니다.

---

# 클리커 게임 기획서: "포인트 생성기" (Point Generator)

## 1. 개요 (Overview)

*   **게임 이름:** 포인트 생성기 (Point Generator)
*   **장르:** 캐주얼 클리커 (Idle/Clicker)
*   **플랫폼:** 모바일 (Android/iOS) - Android 앱 개발을 염두에 둔 기획
*   **컨셉:** 플레이어가 화면을 클릭하여 포인트를 획득하고, 이 포인트로 다양한 업그레이드를 구매하여 포인트 생산 능력을 자동화하거나 증대시키는, 아주 단순한 형태의 숫자 불리기 게임. `ListView`를 활용하여 업그레이드 상점을 구현합니다.
*   **핵심 목표:** 클릭과 업그레이드를 통해 가능한 한 많은 포인트를 축적하고, 모든 업그레이드를 구매하는 것.

## 2. 핵심 게임 루프 (Core Game Loop)

1.  **클릭:** 화면 중앙의 큰 버튼을 클릭하여 즉시 포인트를 획득합니다.
2.  **포인트 축적:** 획득한 포인트가 `현재 포인트`에 합산됩니다. (자동 생산 업그레이드 구매 시, 일정 시간마다 자동 생산된 포인트도 합산)
3.  **업그레이드 구매:** 축적된 포인트를 사용하여 `ListView` 형태의 업그레이드 상점에서 새로운 업그레이드를 구매합니다.
4.  **능력 향상:** 업그레이드를 통해 '클릭당 포인트' 또는 '초당 포인트' 생산량이 증가합니다.
5.  **반복:** 향상된 생산 능력으로 더 많은 포인트를 빠르게 모으고, 더 강력한 업그레이드를 구매하며 반복합니다.

## 3. UI 구성 (User Interface Layout)

게임 화면은 크게 세 부분으로 나뉩니다:

```
+----------------------------------------------------+
| [현재 포인트: 123,456 P]                           |  <-- TextView (현재 보유 포인트)
| [클릭당 포인트: +10 P]                             |  <-- TextView (클릭 시 획득 포인트)
| [초당 포인트: +50 P]                               |  <-- TextView (자동 획득 포인트)
|                                                    |
|         +----------------------------------+       |
|         |           포인트 얻기!           |       |  <-- Button (메인 클릭 버튼)
|         |           (큰 버튼)              |       |
|         +----------------------------------+       |
|                                                    |
| [업그레이드 상점]                                  |  <-- TextView (상점 제목)
| +------------------------------------------------+ |
| | [이름] 강화된 손가락                              | |  <-- ListView Item (각 업그레이드 항목)
| | [효과] 클릭당 +1 P / [가격] 10 P                 | |
| +------------------------------------------------+ |
| | [이름] 자동 클릭 머신                             | |
| | [효과] 초당 +1 P / [가격] 100 P                  | |
| +------------------------------------------------+ |
| | ... (다른 업그레이드 항목들)                     | |
| +------------------------------------------------+ |
+----------------------------------------------------+
```

## 4. 게임 요소 (Game Elements)

### 4.1. 자원 (Resources)

*   **포인트 (Point):** 게임 내 유일한 자원. 클릭 및 자동 생산으로 획득하며, 업그레이드 구매에 사용됩니다.

### 4.2. 메인 액션 (Main Action)

*   **클릭 버튼:**
    *   화면 중앙에 크게 배치된 버튼입니다.
    *   플레이어가 이 버튼을 클릭할 때마다 `현재 포인트`가 `클릭당 포인트` 값만큼 증가합니다.

### 4.3. 업그레이드 (Upgrades) - `ListView` 활용

`ListView`는 게임 내 모든 업그레이드를 나열하는 상점 역할을 합니다. 각 리스트 아이템은 하나의 업그레이드 정보를 표시하며, 터치 시 구매 로직이 실행됩니다.

**각 `ListView` 항목에 표시될 정보:**

*   **업그레이드 이름:** (예: '강화된 손가락')
*   **효과:** (예: '클릭당 +1 포인트', '초당 +5 포인트')
*   **현재 가격:** (예: '100 P')

**업그레이드 종류 (예시 - 초기 구현을 위한 최소한의 종류):**

1.  **강화된 손가락 (Enhanced Finger)**
    *   **효과:** `클릭당 포인트` +1 증가
    *   **초기 가격:** 10 P
    *   **특징:** 구매할 때마다 다음 구매 가격이 점진적으로 상승합니다. (예: 10 -> 20 -> 40 -> 80 -> ...)

2.  **자동 클릭 머신 (Auto Click Machine)**
    *   **효과:** `초당 포인트` +1 증가
    *   **초기 가격:** 100 P
    *   **특징:** 구매할 때마다 다음 구매 가격이 점진적으로 상승합니다. (예: 100 -> 200 -> 400 -> ...)

3.  **대량 생산 시설 (Mass Production Facility)**
    *   **효과:** `초당 포인트` +10 증가
    *   **초기 가격:** 1,000 P
    *   **특징:** 구매할 때마다 다음 구매 가격이 점진적으로 상승합니다.

4.  **슈퍼 에너지 증폭기 (Super Energy Amplifier)**
    *   **효과:** `클릭당 포인트` +5 증가 & `초당 포인트` +5 증가
    *   **초기 가격:** 5,000 P
    *   **특징:** 구매할 때마다 다음 구매 가격이 점진적으로 상승합니다.

## 5. 게임 규칙 및 시스템 (Game Rules & Systems)

### 5.1. 초기 상태

*   **현재 포인트:** 0 P
*   **클릭당 포인트:** 1 P
*   **초당 포인트:** 0 P

### 5.2. 포인트 획득

*   **클릭 획득:** 플레이어가 메인 클릭 버튼을 누를 때마다 `현재 포인트`는 `클릭당 포인트` 값만큼 증가합니다.
*   **자동 획득:** `초당 포인트`가 0보다 클 경우, 1초(또는 앱에서 설정한 주기)마다 `초당 포인트` 값만큼 `현재 포인트`가 자동으로 증가합니다. (백그라운드 타이머 또는 핸들러를 사용)

### 5.3. 업그레이드 구매 로직

1.  **선택:** 플레이어가 `ListView`에서 구매하고자 하는 업그레이드 항목을 터치합니다.
2.  **가격 확인:** 시스템은 플레이어의 `현재 포인트`가 해당 업그레이드의 `현재 가격`보다 많거나 같은지 확인합니다.
3.  **구매 성공 시:**
    *   `현재 포인트`에서 해당 업그레이드의 `현재 가격`을 차감합니다.
    *   업그레이드의 `효과`를 즉시 적용합니다 (예: `클릭당 포인트` 또는 `초당 포인트` 증가).
    *   해당 업그레이드의 `현재 가격`을 다음 구매를 위해 상승시킵니다. (일반적으로 `현재 가격 * 1.1` 또는 `1.15` 같은 승수 적용)
    *   UI를 새로고침하여 변경된 `현재 포인트`, `클릭당 포인트`, `초당 포인트`, 그리고 업그레이드 목록의 업데이트된 가격을 표시합니다.
4.  **구매 실패 (포인트 부족) 시:**
    *   간단한 메시지 (예: "포인트가 부족합니다!")를 화면에 표시합니다.

## 6. `ListView` 구현 세부 사항

### 6.1. 데이터 모델 (Data Model)
게임 데이터는 주로 다음 C# 클래스들로 구성됩니다:

*   **`UpgradeDefinition` (정적 데이터):** 각 업그레이드 유형의 고정된 정보를 정의합니다. 이 데이터는 게임 시작 시 로드되며 변경되지 않습니다. (예: `GameData/UpgradeDefinition.cs`)
    *   `code` (int): 내부 시스템용 숫자 ID.
    *   `codeName` (string): 업그레이드의 고유 문자열 ID. `UserUpgradeProgress`와 연결하는 데 사용됩니다. (예: "enhanced_finger")
    *   `Name` (Str): 화면에 표시될 업그레이드 이름 (다국어 지원 가능한 `Str` 타입). (예: "강화된 손가락")
    *   `Description` (Str): 화면에 표시될 업그레이드 효과 설명 (다국어 지원 가능한 `Str` 타입). (예: "클릭당 +1 포인트")
    *   `BaseCost` (long): 초기 구매 가격.
    *   `CostMultiplier` (double): 구매 시 가격 상승 배율 (예: 1.1).
    *   `PointsPerClickEffect` (long): 이 업그레이드가 레벨당 증가시키는 클릭당 포인트.
    *   `PointsPerSecondEffect` (long): 이 업그레이드가 레벨당 증가시키는 초당 포인트.
    *   `CalculateCostForLevel(int currentLevel)` (method): 특정 레벨에서의 업그레이드 구매 비용을 계산하여 `long` 타입으로 반환합니다.

*   **`UserUpgradeProgress` (사용자별 진행 상황):** 플레이어가 특정 업그레이드를 얼마나 구매했는지(레벨)를 저장합니다. (예: `Data/UserData/UserUpgradeProgress.cs`)
    *   `UpgradeId` (string): `UpgradeDefinition`의 `codeName`과 매칭되는 ID.
    *   `CurrentLevel` (int): 해당 업그레이드의 현재 레벨.

*   **`UserData` (전체 사용자 데이터):** 플레이어의 전반적인 게임 진행 상황을 저장하며, 저장/로드 대상입니다. (예: `Data/UserData/UserData.cs`)
    *   `CurrentPoints` (long): 현재 보유 포인트.
    *   `PointsPerClick` (long): 클릭 한 번당 획득하는 총 포인트.
    *   `PointsPerSecond` (long): 초당 자동으로 획득하는 총 포인트.
    *   `UserUpgradeProgresses` (List<UserUpgradeProgress>): 플레이어가 구매한 모든 업그레이드의 레벨 정보 목록.
    *   `GetUpgradeLevel(string upgradeId)` (method): 특정 `upgradeId`에 해당하는 업그레이드의 현재 레벨을 반환합니다. 없으면 0을 반환합니다.
    *   `SetUpgradeLevel(string upgradeId, int newLevel)` (method): 특정 `upgradeId`에 해당하는 업그레이드의 레벨을 설정하거나, 목록에 없으면 새로 추가합니다.

**ListView 표시 정보 구성:**

`ListView`의 각 항목에 표시될 정보 (이름, 효과, 현재 가격)는 다음과 같이 구성됩니다:
1.  **업그레이드 이름 및 효과 설명:** `UpgradeDefinition` 인스턴스에서 `Name`과 `Description`을 가져옵니다.
2.  **현재 레벨:** `UserData.GetUpgradeLevel(upgradeDefinition.codeName)`을 호출하여 해당 업그레이드의 `CurrentLevel`을 가져옵니다.
3.  **현재 가격:** `upgradeDefinition.CalculateCostForLevel(currentLevel)`을 호출하여 현재 레벨에 대한 구매 가격을 계산합니다.

**예시: "강화된 손가락" 업그레이드 정보 표시**
*   `UpgradeDefinition`:
    *   `codeName`: "enhanced_finger"
    *   `Name`: "강화된 손가락"
    *   `Description`: "클릭당 +1 P"
    *   `BaseCost`: 10L
    *   `CostMultiplier`: 1.15
*   `UserData` (예시 상황): "enhanced_finger"의 `CurrentLevel`이 2라고 가정.
*   표시될 가격 계산: `enhancedFingerDefinition.CalculateCostForLevel(2)`

**업그레이드 구매 후 레벨업 처리:**
*   플레이어가 업그레이드를 구매하면, `UserData.SetUpgradeLevel(upgradeId, currentLevel + 1)`을 호출하여 해당 업그레이드의 레벨을 증가시킵니다.
*   변경된 `PointsPerClick` 및 `PointsPerSecond`는 모든 `UserUpgradeProgress`와 연관된 `UpgradeDefinition`의 효과를 합산하여 `UserData`에 다시 계산되어 저장됩니다.


### 6.2. 어댑터 (Adapter)

*   `ListView`에 `UpgradeItem` 목록을 표시하기 위한 `ArrayAdapter` 또는 커스텀 `BaseAdapter`를 구현합니다.
*   각 리스트 항목(row)의 레이아웃은 `TextView` 2~3개를 사용하여 `업그레이드 이름`, `효과`, `가격`을 표시하도록 구성합니다.

### 6.3. 클릭 이벤트 (Click Event)

*   `ListView`의 `OnItemClickListener`를 사용하여 사용자가 특정 업그레이드 항목을 터치했을 때 위에서 정의한 `업그레이드 구매 로직`을 실행합니다.

## 7. 추가 고려 사항 (Further Considerations)

*   **데이터 저장 (Data Persistence):**
    *   앱을 종료해도 플레이어의 진행 상황 (현재 포인트, 클릭당 포인트, 초당 포인트, 각 업그레이드의 현재 레벨 및 다음 가격)이 유지되도록 `SharedPreferences` 또는 간단한 파일 저장 기능을 활용합니다.
    *   (수정) 앱을 종료해도 플레이어의 진행 상황 (`UserData` 객체 전체: 현재 포인트, 총 클릭당/초당 포인트, 각 업그레이드의 현재 레벨)이 유지되도록 `SharedPreferences` (JSON 직렬화/역직렬화) 또는 파일 저장 기능을 활용합니다. "다음 가격"은 저장하지 않고 필요할 때마다 현재 레벨을 기준으로 계산합니다.
*   **UI 업데이트 최적화:**
    *   포인트 숫자가 빠르게 변할 때 UI가 버벅이지 않도록 `Handler`나 `Timer`를 사용하여 초당 포인트 업데이트를 부드럽게 처리합니다.
    *   업그레이드 구매 시 관련 UI 요소(포인트, PPC, PPS)만 업데이트하여 효율성을 높입니다.
*   **시각적 피드백:**
    *   메인 클릭 버튼 클릭 시 색상이 잠시 변하거나, 작은 애니메이션 효과를 추가하여 클릭감을 높입니다.
    *   포인트가 증가할 때 숫자가 잠시 커지거나, 위로 튀어 오르는 효과를 추가할 수 있습니다.
*   **사운드:**
    *   클릭 시 짧은 효과음, 업그레이드 구매 시 성공 효과음을 추가하여 게임의 몰입도를 높입니다.

---